name: Auto Blog Entry on Commit

on:
  push:
    branches: [ main ]
    paths:
      - 'content/**'
      - '!content/auto-generated/**'

jobs:
  create-blog-entry:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip-blog]')"
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Create auto-generated blog entry
      run: |
        # Create auto-generated directory if it doesn't exist
        mkdir -p content/auto-generated
        
        # Get commit info
        COMMIT_HASH="${{ github.sha }}"
        COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
        COMMIT_AUTHOR="${{ github.event.head_commit.author.name }}"
        COMMIT_DATE=$(date -u +"%Y-%m-%d %H:%M")
        SLUG="commit-$(date -u +"%Y%m%d-%H%M%S")"
        
        # Create blog entry
        cat > "content/auto-generated/${SLUG}.md" << EOF
        Title: Code Update: ${COMMIT_MESSAGE}
        Date: ${COMMIT_DATE}
        Category: Development
        Tags: git, commits, development
        Slug: ${SLUG}
        Authors: ${COMMIT_AUTHOR}
        Summary: Automatic blog entry for commit ${COMMIT_HASH:0:7}
        
        # Development Update
        
        **Commit:** \`${COMMIT_HASH:0:7}\`  
        **Author:** ${COMMIT_AUTHOR}  
        **Date:** ${COMMIT_DATE}  
        
        ## Changes Made
        
        ${COMMIT_MESSAGE}
        
        ## Files Modified
        
        EOF
        
        # Add list of modified files
        echo "The following files were modified in this commit:" >> "content/auto-generated/${SLUG}.md"
        echo "" >> "content/auto-generated/${SLUG}.md"
        git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | while read file; do
          echo "- \`${file}\`" >> "content/auto-generated/${SLUG}.md"
        done
        
    - name: Install Pelican
      run: |
        python -m pip install --upgrade pip
        pip install pelican markdown
        
    - name: Build and deploy
      run: |
        pelican content -o docs -s publishconf.py
        
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "Auto-generated blog entry for commit ${{ github.sha }}" || exit 0
        git push